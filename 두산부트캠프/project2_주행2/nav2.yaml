bt_navigator: #Behavior Tree를 통해 로봇의 행동을 결정하는 노드입니다.      <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ros__parameters:
    use_sim_time: True  # 시뮬레이션 시간 사용 여부를 설정. True로 설정하면 /clock 토픽의 데이터를 시간으로 사용.
    global_frame: map   # 전역 프레임 이름. 로봇의 위치를 추적하는 기준 좌표계.
    robot_base_frame: base_link  # 로봇의 기준 프레임 이름. 로봇 자체의 좌표계.
    odom_topic: odom    # odometry 데이터가 게시되는 ROS 토픽 이름.
    bt_loop_duration: 10  # 행동 트리의 주기(초 단위). 행동 트리를 얼마나 자주 실행할지 설정.
    default_server_timeout: 20  # 서버 응답 시간 제한(초 단위). 이 시간 내에 응답이 없으면 실패로 간주.

    # 'default_nav_through_poses_bt_xml' and 'default_nav_to_pose_bt_xml' are use defaults:
    # nav2_bt_navigator/navigate_to_pose_w_replanning_and_recovery.xml
    # nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml
    # They can be set here or via a RewrittenYaml remap from a parent launch file to Nav2.
    plugin_lib_names: # Behavior Tree 실행에 필요한 플러그인 이름들.
    - nav2_compute_path_to_pose_action_bt_node  # 지정된 위치로 경로를 계산하는 행동 트리 노드.
    - nav2_compute_path_through_poses_action_bt_node  
    - nav2_smooth_path_action_bt_node 
    - nav2_follow_path_action_bt_node # 경로를 따라가는 행동 트리 노드.
    - nav2_spin_action_bt_node
    - nav2_wait_action_bt_node
    - nav2_assisted_teleop_action_bt_node
    - nav2_back_up_action_bt_node
    - nav2_drive_on_heading_bt_node
    - nav2_clear_costmap_service_bt_node  # 코스트맵을 초기화하는 서비스 행동 트리 노드.
    - nav2_is_stuck_condition_bt_node
    - nav2_goal_reached_condition_bt_node
    - nav2_goal_updated_condition_bt_node
    - nav2_globally_updated_goal_condition_bt_node
    - nav2_is_path_valid_condition_bt_node
    - nav2_initial_pose_received_condition_bt_node
    - nav2_reinitialize_global_localization_service_bt_node
    - nav2_rate_controller_bt_node
    - nav2_distance_controller_bt_node
    - nav2_speed_controller_bt_node
    - nav2_truncate_path_action_bt_node
    - nav2_truncate_path_local_action_bt_node
    - nav2_goal_updater_node_bt_node
    - nav2_recovery_node_bt_node
    - nav2_pipeline_sequence_bt_node
    - nav2_round_robin_node_bt_node
    - nav2_transform_available_condition_bt_node
    - nav2_time_expired_condition_bt_node
    - nav2_path_expiring_timer_condition
    - nav2_distance_traveled_condition_bt_node
    - nav2_single_trigger_bt_node
    - nav2_goal_updated_controller_bt_node
    - nav2_is_battery_low_condition_bt_node
    - nav2_navigate_through_poses_action_bt_node
    - nav2_navigate_to_pose_action_bt_node
    - nav2_remove_passed_goals_action_bt_node
    - nav2_planner_selector_bt_node
    - nav2_controller_selector_bt_node
    - nav2_goal_checker_selector_bt_node
    - nav2_controller_cancel_bt_node
    - nav2_path_longer_on_approach_bt_node
    - nav2_wait_cancel_bt_node
    - nav2_spin_cancel_bt_node
    - nav2_back_up_cancel_bt_node
    - nav2_assisted_teleop_cancel_bt_node
    - nav2_drive_on_heading_cancel_bt_node

bt_navigator_navigate_through_poses_rclcpp_node:
  ros__parameters:
    use_sim_time: True

bt_navigator_navigate_to_pose_rclcpp_node:
  ros__parameters:
    use_sim_time: True

controller_server:  #로봇의 경로를 따라 이동을 제어하는 서버입니다.
  ros__parameters:
    use_sim_time: True # 시뮬레이션 시간 사용 여부
    controller_frequency: 20.0  # 제어 루프 실행 빈도 (Hz)
    min_x_velocity_threshold: 0.001 # x축 최소 속도 임계값
    min_y_velocity_threshold: 0.5 
    min_theta_velocity_threshold: 0.001  # 회전 속도 최소 임계값
    failure_tolerance: 0.3  # 경로 추적 실패 허용 오차
    progress_checker_plugin: "progress_checker"  # 진행 상황 확인 플러그인
    goal_checker_plugins: ["general_goal_checker"]  # 목표 도달 확인 플러그인
    controller_plugins: ["FollowPath"]  # 경로 추적 플러그인

    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5
      movement_time_allowance: 10.0
    # Goal checker parameters
    #precise_goal_checker:
    #  plugin: "nav2_controller::SimpleGoalChecker"
    #  xy_goal_tolerance: 0.25
    #  yaw_goal_tolerance: 0.25
    #  stateful: True
    general_goal_checker:
      stateful: True
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.25
      yaw_goal_tolerance: 0.25
    # DWB parameters
    FollowPath:
      plugin: "dwb_core::DWBLocalPlanner" # DWB 로컬 플래너
      debug_trajectory_details: True # 경로 세부 정보 디버그
      min_vel_x: 0.0  # x축 최소 속도
      min_vel_y: 0.0
      max_vel_x: 0.26 #@@@
      max_vel_y: 0.0
      max_vel_theta: 1.0
      min_speed_xy: 0.0
      max_speed_xy: 0.26
      min_speed_theta: 0.0
      # Add high threshold velocity for turtlebot 3 issue.
      # https://github.com/ROBOTIS-GIT/turtlebot3_simulations/issues/75
      acc_lim_x: 2.5 # x축 가속도 제한 #@@@
      acc_lim_y: 0.0
      acc_lim_theta: 3.2
      decel_lim_x: -2.5
      decel_lim_y: 0.0
      decel_lim_theta: -3.2
      vx_samples: 20
      vy_samples: 5
      vtheta_samples: 20
      sim_time: 1.7  # 시뮬레이션 시간 창  @@@
      linear_granularity: 0.05
      angular_granularity: 0.025
      transform_tolerance: 0.2 #@@@
      xy_goal_tolerance: 0.25 ##@@@
      trans_stopped_velocity: 0.25  ##@@@
      short_circuit_trajectory_evaluation: True
      stateful: True
      critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
      BaseObstacle.scale: 0.02
      PathAlign.scale: 32.0  #@@@
      PathAlign.forward_point_distance: 0.1 #@@
      GoalAlign.forward_point_distance: 0.1
      PathDist.scale: 32.0
      GoalDist.scale: 24.0
      RotateToGoal.scale: 32.0  #@@@
      RotateToGoal.slowing_factor: 5.0
      RotateToGoal.lookahead_time: -1.0

local_costmap:  #로봇 주변의 지역 장애물 정보를 나타냅니다.
  local_costmap:
    ros__parameters:
      update_frequency: 5.0  # 로컬 코스트맵 업데이트 빈도 (Hz)
      publish_frequency: 2.0 # 로컬 코스트맵 퍼블리시 빈도 (Hz)
      global_frame: odom #로컬 코스트맵 전역 프레임
      robot_base_frame: base_link 
      use_sim_time: True
      rolling_window: true # 이동하는 창 사용 여부
      width: 3 # 로컬 코스트맵 너비 (m 단위)
      height: 3  # 로컬 코스트맵 높이 (m 단위)
      resolution: 0.06 # 로컬 코스트맵 해상도 (m 단위)   #@@@
      robot_radius: 0.175 #@@@
      plugins: ["static_layer", "voxel_layer", "inflation_layer"] # 사용되는 레이어
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer" # 장애물 주변 비용 확장
        cost_scaling_factor: 4.0 # 비용 증가율  #@@@
        inflation_radius: 0.45  # 비용 확장 반경 (m 단위)
      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: True
        publish_voxel_map: True
        origin_z: 0.0
        z_resolution: 0.05
        z_voxels: 16
        max_obstacle_height: 2.0
        mark_threshold: 0
        observation_sources: scan
        scan:
          topic: scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 3.0 # 5.0 으로 늘려서 더 넓은공간 창출?
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5 #1.5? 1.0 으로 줄여볼깡?
          obstacle_min_range: 0.0
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      always_send_full_costmap: True

global_costmap: #환경의 전역 장애물 정보를 관리합니다.
  global_costmap:
    ros__parameters:
      update_frequency: 1.0 # 전역 코스트맵 업데이트 빈도 (Hz)
      publish_frequency: 1.0 # 전역 코스트맵 퍼블리시 빈도 (Hz)
      global_frame: map # 전역 코스트맵 전역 프레임
      robot_base_frame: base_link
      use_sim_time: True
      robot_radius: 0.175 #@@@
      resolution: 0.06 # 전역 코스트맵 해상도 (m 단위) #@@@
      track_unknown_space: true
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]  # 사용되는 레이어
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 4.0
        inflation_radius: 0.45
      always_send_full_costmap: True

planner_server: #경로 계획을 담당하는 서버입니다.
  ros__parameters:
    expected_planner_frequency: 20.0
    use_sim_time: True
    planner_plugins: ["GridBased"]
    GridBased:
      plugin: "nav2_navfn_planner/NavfnPlanner"
      tolerance: 0.5  #<<<<<< 0
      use_astar: false
      allow_unknown: true

smoother_server: #계획된 경로를 부드럽게 조정하는 서버입니다.
  ros__parameters:
    use_sim_time: True
    smoother_plugins: ["simple_smoother"]
    simple_smoother:
      plugin: "nav2_smoother::SimpleSmoother"
      tolerance: 1.0e-10
      max_its: 1000
      do_refinement: True

behavior_server: #로봇의 특정 동작(예: 회전, 후진 등)을 정의합니다.
  ros__parameters:
    costmap_topic: local_costmap/costmap_raw
    footprint_topic: local_costmap/published_footprint
    cycle_frequency: 10.0
    behavior_plugins: ["spin", "backup", "drive_on_heading", "assisted_teleop", "wait"]
    spin:
      plugin: "nav2_behaviors/Spin"
    backup:
      plugin: "nav2_behaviors/BackUp"
    drive_on_heading:
      plugin: "nav2_behaviors/DriveOnHeading"
    wait:
      plugin: "nav2_behaviors/Wait"
    assisted_teleop:
      plugin: "nav2_behaviors/AssistedTeleop"
    global_frame: odom
    robot_base_frame: base_link
    transform_tolerance: 0.1
    use_sim_time: true
    simulate_ahead_time: 2.0
    max_rotational_vel: 1.0
    min_rotational_vel: 0.4
    rotational_acc_lim: 3.2

robot_state_publisher: #로봇의 상태를 퍼블리싱하는 노드입니다.
  ros__parameters:
    use_sim_time: True

waypoint_follower: #로봇이 웨이포인트를 따라 이동하도록 설정합니다.
  ros__parameters:
    use_sim_time: True
    loop_rate: 20
    stop_on_failure: false
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 200

velocity_smoother: #로봇의 속도를 부드럽게 조정합니다.
  ros__parameters:
    use_sim_time: True
    smoothing_frequency: 20.0
    scale_velocities: False
    feedback: "OPEN_LOOP"
    max_velocity: [0.26, 0.0, 1.0]
    min_velocity: [-0.26, 0.0, -1.0]
    max_accel: [2.5, 0.0, 3.2]
    max_decel: [-2.5, 0.0, -3.2]
    odom_topic: "odom"
    odom_duration: 0.1
    deadband_velocity: [0.0, 0.0, 0.0]
    velocity_timeout: 1.0